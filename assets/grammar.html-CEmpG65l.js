import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,f as a,o as n}from"./app-Bn4WNhjk.js";const t={};function l(h,s){return n(),e("div",null,s[0]||(s[0]=[a(`<h2 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法"><span>基本语法</span></a></h2><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><h2 id="控制结构" tabindex="-1"><a class="header-anchor" href="#控制结构"><span>控制结构</span></a></h2><ul><li>顺序结构</li><li><a href="######%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84">选择结构</a></li><li><a href="######%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84">循环结构</a></li></ul><h6 id="选择结构" tabindex="-1"><a class="header-anchor" href="#选择结构"><span>选择结构</span></a></h6><ul><li><strong>if语句</strong></li></ul><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c++"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (expression)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	statement</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	statement</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>switch语句</strong></li></ul><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c++"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">switch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (expression) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	case</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> numericalValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		statement;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	case</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> numericalValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		statement;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		statement;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h6 id="循环结构" tabindex="-1"><a class="header-anchor" href="#循环结构"><span>循环结构</span></a></h6><ul><li><strong>while语句</strong></li></ul><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c++"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (expression)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	statement</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>循环语句每次开始判断<code>expression</code>的值,如为<code>true</code>则循环继续,反之结束循环.</p><ul><li><strong>do...while</strong></li></ul><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c++"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	statement</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (expression);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此为先执行一遍循环体内表达式,在进行判断,即确定<code>expression</code>的值.如为<code>true</code>则循环继续,反之结束循环</p><ul><li><strong>for语句</strong></li></ul><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c++"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (expression1; expression2; expression3)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	statement</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行<code>expression1</code>求解<code>expression2</code>用于判断是否继续循环.执行<code>expression3</code>后返回第二部</p><h2 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构"><span>数据结构</span></a></h2><ul><li>数组</li><li>字符串</li></ul><h6 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h6><p>数组为一组数据类型相同的变量的有序集合, 使用数组名标识, 数组中所包含的每个变量, 即数组元素, 通过此变量在数组中的相对位置,<br> 即下标来区分和引用</p><ul><li>一维数组</li></ul><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c++"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dataType Array [IntegerConstantExpression];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>多维数组</li></ul><h6 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h6><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><p>C/C++ 语言提供3种类型的函数</p><ul><li>主函数<code>main()</code></li><li>标准库函数</li><li>自定义函数</li></ul><p>使用自定义函数时，需先定义该函数，格式为：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c++"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[functionTypes] [functionName] ([Types </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Parameters</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	[statements];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [expressions];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>functionTypes</code>函数类型为调用该函数所得到结果的数值类型，即返回值类型，由<code>return</code>返回。<br><code>functionName</code>函数名称</p><h2 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象"><span>面向对象</span></a></h2>`,34)]))}const d=i(t,[["render",l]]),c=JSON.parse('{"path":"/libs/system-program/cpp/grammar/grammar.html","title":"C++ 语法","lang":"zh-CN","frontmatter":{"title":"C++ 语法","categories":["编程语言"],"tags":["Cpp"],"date":"2025-06-02T00:00:00.000Z","description":"基本语法 数据类型 控制结构 顺序结构 选择结构 循环结构 选择结构 if语句 switch语句 循环结构 while语句 循环语句每次开始判断expression的值,如为true则循环继续,反之结束循环. do...while 此为先执行一遍循环体内表达式,在进行判断,即确定expression的值.如为true则循环继续,反之结束循环 for语句...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++ 语法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-02T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-03T01:48:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/libs/system-program/cpp/grammar/grammar.html"}],["meta",{"property":"og:site_name","content":"开始"}],["meta",{"property":"og:title","content":"C++ 语法"}],["meta",{"property":"og:description","content":"基本语法 数据类型 控制结构 顺序结构 选择结构 循环结构 选择结构 if语句 switch语句 循环结构 while语句 循环语句每次开始判断expression的值,如为true则循环继续,反之结束循环. do...while 此为先执行一遍循环体内表达式,在进行判断,即确定expression的值.如为true则循环继续,反之结束循环 for语句..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-03T01:48:57.000Z"}],["meta",{"property":"article:tag","content":"Cpp"}],["meta",{"property":"article:published_time","content":"2025-06-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-03T01:48:57.000Z"}]]},"git":{"createdTime":1748915337000,"updatedTime":1748915337000,"contributors":[{"name":"zheng","username":"zheng","email":"1123611308@qq.com","commits":1,"url":"https://github.com/zheng"}]},"readingTime":{"minutes":1.27,"words":380},"filePathRelative":"libs/system-program/cpp/grammar/grammar.md","excerpt":"<h2>基本语法</h2>\\n<h2>数据类型</h2>\\n<h2>控制结构</h2>\\n<ul>\\n<li>顺序结构</li>\\n<li><a href=\\"######%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84\\">选择结构</a></li>\\n<li><a href=\\"######%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84\\">循环结构</a></li>\\n</ul>\\n<h6>选择结构</h6>\\n<ul>\\n<li><strong>if语句</strong></li>\\n</ul>\\n<div class=\\"language-c++ line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"c++\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-c++\\"><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">if</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> (expression)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">\\tstatement</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">else</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">\\tstatement</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,c as data};
